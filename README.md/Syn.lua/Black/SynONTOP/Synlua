local RS = game:GetService("RunService")

local ScreenGui = Instance.new("ScreenGui")
    local Frame = Instance.new("Frame")
    local TextButton = Instance.new("TextButton")
    local UITextSizeConstraint = Instance.new("UITextSizeConstraint")

    ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    Frame.Parent = ScreenGui
    Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Frame.BackgroundTransparency = 0
    Frame.Position = UDim2.new(1, -120, 0, 0)
    Frame.Size = UDim2.new(0, 100, 0, 50)

    TextButton.Parent = Frame

    TextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TextButton.BackgroundTransparency = 1.000
    TextButton.Size = UDim2.new(1, 0, 1, 0)
    TextButton.Font = Enum.Font.SourceSans
    TextButton.Text = "Syn.lua toggle"
    TextButton.TextColor3 = Color3.fromRGB(71, 153, 173)
    TextButton.TextScaled = true
    TextButton.TextSize = 30
    TextButton.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)
    TextButton.TextStrokeTransparency = 0.000
    TextButton.TextWrapped = true
    TextButton.MouseButton1Down:Connect(
        function()
            Library:Toggle()
        end
    )

    UITextSizeConstraint.Parent = TextButton
    UITextSizeConstraint.MaxTextSize = 30

    local player = game.Players.LocalPlayer

   
    local function onCharacterAdded(character)
        ScreenGui.Parent = player.PlayerGui
    end

    local function connectCharacterAdded()
        player.CharacterAdded:Connect(onCharacterAdded)
    end

   
    connectCharacterAdded()

   
    player.CharacterRemoving:Connect(
        function()
            ScreenGui.Parent = nil
        end
    )


local repo = 'https://raw.githubusercontent.com/LionTheGreatRealFrFr/MobileLinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()




local Window =
        Library:CreateWindow(
        {
            Title = "Syb lua",
            Center = true,
            AutoShow = true
        }
    )

    local Tabs = {
        Main = Window:AddTab("Legit"),
        Rage = Window:AddTab("HvH"),
        Visuals = Window:AddTab("Visuals"),
        ["UI Settings"] = Window:AddTab("UI Settings")
    }



local Tool = Tabs.Main:AddLeftGroupbox("tool")

local Cam = Tabs.Main:AddLeftGroupbox("Camlock")

local Res = Tabs.Main:AddLeftGroupbox("Resolver")

local Tar = Tabs.Main:AddRightGroupbox("target aim")

local Tri = Tabs.Main:AddRightGroupbox("trigger bot")

local cframe = Tabs.Rage: AddRightGroupbox("Speed")

local TargetStrafe = Tabs.Rage: AddLeftGroupbox("Target strafe")

local Fov = Tabs.Visuals: AddLeftGroupbox("Fov")



Cam:AddToggle(
        "Enable Camlock",
        {
            Text = "Enable camlock",
            Default = true,
            Tooltip = "Enable",
            Callback = function(state)
             Syn.Enabled = state
            end 
        }
    )

Cam:AddToggle(
        "Enable ttko",
        {
            Text = "Enable ttko",
            Default = false,
            Tooltip = "Enable",
            Callback = function(state)
               Syn.TTKO = state
            end
        }
    ) 

Cam:AddToggle(
        "Enable autopred",
        {
            Text = "Enable autopred",
            Default = false,
            Tooltip = "Enable",
            Callback = function(state)
               Syn.AutoPred = state
            end
        }
    ) 



Cam:AddInput(
        "Prediction",
        {
            Default = "Prediction",
            Numeric = false,
            Finished = false,
            Text = "Prediction",
            Tooltip = "Change Prediction For Target",
            Placeholder = "0.1398",
            Callback = function(value)
                Syn.Prediction = value
            end
        }
    )
    

Cam:AddInput(
        "Smoothness",
        {
            Default = "smoothness",
            Numeric = false,
            Finished = false,
            Text = "smoothness",
            Tooltip = "Change smoothing For Target",
            Placeholder = "0.9",
            Callback = function(value)
                Syn.Smoothness = value
            end
        }
    )

Cam:AddInput(
        "Shake",
        {
            Default = "Shake",
            Numeric = false,
            Finished = false,
            Text = "shake ",
            Tooltip = "Change shake For Target",
            Placeholder = "0",
            Callback = function(value)
                Syn.ShakeValue = value
            end
        }
    )

Cam:AddDropdown(
        "Hitpart",
        {
            Values = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso", "LeftHand", "RightHand", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", "LeftLowerLeg",  "LeftUpperLeg", "RightLowerLeg", "RightFoot",  "RightUpperLeg"},
            Default = 1,
            Multi = false,
            Text = "Hitpart",
            Tooltip = "Choose the hit part",
            Callback = function(value)
                Syn.AimPart = value
            end
        }
    )

Tar:AddToggle(
        "Enable TargetAim",
        {
            Text = "Enable targetaim",
            Default = true,
            Tooltip = "Enable",
            Callback = function(state)
               targetaim.enabled = state
            end
        }
    )
    
Tar:AddToggle(
        "AutoShoot",
        {
            Text = "AutoShoot",
            Default = false,
            Tooltip = "Enable",
            Callback = function(state)
            targetaim.AutoShoot = state
            end
        }
    )

Tar:AddInput(
        "Prediction",
        {
            Default = "Prediction",
            Numeric = false,
            Finished = false,
            Text = "Prediction",
            Tooltip = "Change Prediction For Target",
            Placeholder = "0.1355",
            Callback = function(value)
                targetaim.prediction = value
            end
        }
    )
    

Tar:AddToggle(
        "Enable autopred",
        {
            Text = "Enable autopred",
            Default = false,
            Tooltip = "Enable",
            Callback = function(state)
               targetaim.AutoPred = state
            end
        }
    ) 

Tar:AddDropdown(
        "Hitpart",
        {
            Values = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso", "LeftHand", "RightHand", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", "LeftLowerLeg",  "LeftUpperLeg", "RightLowerLeg", "RightFoot",  "RightUpperLeg"},
            Default = 1,
            Multi = false,
            Text = "Hitpart",
            Tooltip = "Choose the hit part",
            Callback = function(value)
                targetaim.targetPart = value
            end
        }
    )
Tar:AddToggle(
        "Enable AutoReload",
        {
            Text = "Enable AutoReload",
            Default = false,
            Tooltip = "Enable",
            Callback = function(state)
               Syn.AutoReload = state
            end
        }
    ) 


Res:AddToggle(
        "Enable Resolver",
        {
            Text = "Enable resolver",
            Default = true,
            Tooltip = "Enable",
            Callback = function(state)
             Syn.Resolver.Enabled = state
            end 
        }
    )

Res:AddDropdown(
        "Resolver",
        {
            Values = {"RecalculateVelocity"},
            Default = 1,
            Multi = false,
            Text = "Resolver Mode",
            Tooltip = "Choose the resolving method",
            Callback = function(value)
                Syn.Resolver.Method = value
            end
        }
    )


Tri:AddToggle(
        "Enable TriggerBot",
        {
            Text = "Enable TriggerBot",
            Default = false,
            Tooltip = "Enable",
            Callback = function(state)
               Syn.Triggerbot.Settings["Automatically Fire"] = state
            end
        }
    )

Tri:AddInput(
        "Click delay",
        {
            Default = "click delay",
            Numeric = false,
            Finished = false,
            Text = "click delay",
            Tooltip = "Change delay For Clicks",
            Placeholder = "0.1",
            Callback = function(value)
                Syn.Triggerbot.Settings["Click Delay"] = value
            end
        }
    )

Tri:AddInput(
        "activation delay",
        {
            Default = "activation delay",
            Numeric = false,
            Finished = false,
            Text = "click delay",
            Tooltip = "Change delay For Clicks",
            Placeholder = "3",
            Callback = function(value)
                Syn.Triggerbot.Settings["Activation Delay"] = value
            end
        }
    )




TargetStrafe:AddToggle(
        "Target Strafe",
        {
            Text = "Target Strafe",
            Default = false,
            Tooltip = "Enable",
            Callback = function(state)
                Syn.TargetStrafe.Enabled = state
            end
        }
    )

TargetStrafe:AddToggle(
        "Target Strafe randomiser",
        {
            Text = "Target Strafe randomiser",
            Default = false,
            Tooltip = "Enable",
            Callback = function(state)
                Syn.TargetStrafe.RandomizerMode = state
            end
        }
    )



TargetStrafe:AddSlider(
    "Target speed",
    {
        Text = "How fast you spin around target",
        Default = 0,
        Min = 0,
        Max = 50,
        Rounding = 1,
        Compact = false,
        Callback = function(Value)
            Syn.TargetStrafe.StrafeSpeed = Value
        end
    }
)

TargetStrafe:AddSlider(
    "Target radius",
    {
        Text = "How far you are around target",
        Default = 0,
        Min = 0,
        Max = 50,
        Rounding = 1,
        Compact = false,
        Callback = function(Value)
            Syn.TargetStrafe.StrafeRadius = Value
        end
    }
)

TargetStrafe:AddSlider(
    "Target height",
    {
        Text = "How heigh you are from the target",
        Default = 0,
        Min = 0,
        Max = 50,
        Rounding = 1,
        Compact = false,
        Callback = function(Value)
            Syn.TargetStrafe.StrafeHeight = Value
        end
    }
)




cframe:AddToggle(
        "Enable cframe",
        {
            Text = "Enable cframe",
            Default = false,
            Tooltip = "Enable",
            Callback = function(state)
               Syn.cframe.enabled = state
            end
        }
    )

cframe:AddSlider(
    "cframe speed",
    {
        Text = "How fast you run around ",
        Default = 0,
        Min = 0,
        Max = 50,
        Rounding = 1,
        Compact = false,
        Callback = function(Value)
            Syn.cframe.Speed = Value
        end
    }
)



Tool:AddButton(
    "Create tool",
    function()
       spawnTool()
    end
)

Tool:AddButton(
    "Create Button",
    function()
       spawnButton()
    end
)

Tool:AddButton(
    "Controller (dpad up)",
    function()
       setupController()
    end
)



local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })

ThemeManager:SetFolder('Synlua')
SaveManager:SetFolder('Synlua/configs')

SaveManager:BuildConfigSection(Tabs['UI Settings'])
ThemeManager:ApplyToTab(Tabs['UI Settings'])

SaveManager:LoadAutoloadConfig()









loadstring(Game:HttpGet("https://raw.githubusercontent.com/Pixeluted/adoniscries/refs/heads/main/Source.lua", true))()

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local GuiService = game:GetService("GuiService")

local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- Function to create the FOV circle
local function createFOVCircle()
    local circle = Drawing.new("Circle")
    circle.Thickness = 1
    circle.Color = Syn.Triggerbot.FOV.Color
    circle.Filled = Syn.Triggerbot.FOV.Filled
    circle.Visible = Syn.Triggerbot.FOV.Enabled
    return circle
end
